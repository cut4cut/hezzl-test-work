// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: internal/controller/rpc/proto/user.proto

package hezzl_test_work

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceUserClient is the client API for ServiceUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceUserClient interface {
	Create(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserId, error)
	Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserId, error)
	GetList(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*UserList, error)
}

type serviceUserClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceUserClient(cc grpc.ClientConnInterface) ServiceUserClient {
	return &serviceUserClient{cc}
}

func (c *serviceUserClient) Create(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/rpc.ServiceUser/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUserClient) Delete(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/rpc.ServiceUser/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUserClient) GetList(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/rpc.ServiceUser/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceUserServer is the server API for ServiceUser service.
// All implementations must embed UnimplementedServiceUserServer
// for forward compatibility
type ServiceUserServer interface {
	Create(context.Context, *UserName) (*UserId, error)
	Delete(context.Context, *UserId) (*UserId, error)
	GetList(context.Context, *Pagination) (*UserList, error)
	mustEmbedUnimplementedServiceUserServer()
}

// UnimplementedServiceUserServer must be embedded to have forward compatible implementations.
type UnimplementedServiceUserServer struct {
}

func (UnimplementedServiceUserServer) Create(context.Context, *UserName) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceUserServer) Delete(context.Context, *UserId) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceUserServer) GetList(context.Context, *Pagination) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedServiceUserServer) mustEmbedUnimplementedServiceUserServer() {}

// UnsafeServiceUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceUserServer will
// result in compilation errors.
type UnsafeServiceUserServer interface {
	mustEmbedUnimplementedServiceUserServer()
}

func RegisterServiceUserServer(s grpc.ServiceRegistrar, srv ServiceUserServer) {
	s.RegisterService(&ServiceUser_ServiceDesc, srv)
}

func _ServiceUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServiceUser/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUserServer).Create(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUser_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUserServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServiceUser/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUserServer).Delete(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUser_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUserServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ServiceUser/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUserServer).GetList(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceUser_ServiceDesc is the grpc.ServiceDesc for ServiceUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ServiceUser",
	HandlerType: (*ServiceUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceUser_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceUser_Delete_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ServiceUser_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/controller/rpc/proto/user.proto",
}
